def extended_gcd(a, b):
    """
    Thu·∫≠t to√°n Euclid m·ªü r·ªông.
    Tr·∫£ v·ªÅ b·ªô 3 s·ªë (g, x, y) sao cho a * x + b * y = g, trong ƒë√≥ g l√† ∆∞·ªõc s·ªë chung l·ªõn nh·∫•t c·ªßa a v√† b.
    """
    if a == 0:
        return b, 0, 1
    else:
        g, x, y = extended_gcd(b % a, a)
        return g, y - (b // a) * x, x

def mod_inverse(a, p):
    """
    T√¨m ngh·ªãch ƒë·∫£o c·ªßa a modulo p s·ª≠ d·ª•ng thu·∫≠t to√°n Euclid m·ªü r·ªông.
    N·∫øu a v√† p kh√¥ng nguy√™n t·ªë c√πng nhau (gcd(a, p) != 1), th√¨ kh√¥ng t·ªìn t·∫°i ngh·ªãch ƒë·∫£o.
    """
    g, x, y = extended_gcd(a, p)
    print(x)
    print(p)
    if g != 1:
        raise ValueError(f"Kh√¥ng t·ªìn t·∫°i ngh·ªãch ƒë·∫£o c·ªßa {a} modulo {p}")
    else:
        return x % p

a = int(input("Nh·∫≠p s·ªë a: "))
p = int(input("Nh·∫≠p s·ªë nguy√™n t·ªë p: "))

try:
    inverse = mod_inverse(a, p)
    print(f"Ngh·ªãch ƒë·∫£o c·ªßa {a} trong tr∆∞·ªùng ùîΩ_{p} l√†: {inverse}")
except ValueError as e:
    print(e)
